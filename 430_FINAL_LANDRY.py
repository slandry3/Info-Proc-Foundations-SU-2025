{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP9vXbZjQ+23N9JO86ook+L"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip3 install ics"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZG8HBiayP5gG","executionInfo":{"status":"ok","timestamp":1754415371692,"user_tz":300,"elapsed":3905,"user":{"displayName":"Sophie Landry","userId":"15316289352877800941"}},"outputId":"2a0159ee-bbc0-4dfd-f1d6-e9881af79474"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: ics in /usr/local/lib/python3.11/dist-packages (0.7.2)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.11/dist-packages (from ics) (2.9.0.post0)\n","Requirement already satisfied: arrow>=0.11 in /usr/local/lib/python3.11/dist-packages (from ics) (1.3.0)\n","Requirement already satisfied: six>1.5 in /usr/local/lib/python3.11/dist-packages (from ics) (1.17.0)\n","Requirement already satisfied: tatsu>4.2 in /usr/local/lib/python3.11/dist-packages (from ics) (5.13.1)\n","Requirement already satisfied: attrs>=19.1.0 in /usr/local/lib/python3.11/dist-packages (from ics) (25.3.0)\n","Requirement already satisfied: types-python-dateutil>=2.8.10 in /usr/local/lib/python3.11/dist-packages (from arrow>=0.11->ics) (2.9.0.20250708)\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2Mc7d_zrxc6k","executionInfo":{"status":"ok","timestamp":1754599488388,"user_tz":300,"elapsed":5034,"user":{"displayName":"Sophie Landry","userId":"15316289352877800941"}},"outputId":"b24ed2d2-fe41-4063-875a-6c2d629744b3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: ics in /usr/local/lib/python3.11/dist-packages (0.7.2)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.11/dist-packages (from ics) (2.9.0.post0)\n","Requirement already satisfied: arrow>=0.11 in /usr/local/lib/python3.11/dist-packages (from ics) (1.3.0)\n","Requirement already satisfied: six>1.5 in /usr/local/lib/python3.11/dist-packages (from ics) (1.17.0)\n","Requirement already satisfied: tatsu>4.2 in /usr/local/lib/python3.11/dist-packages (from ics) (5.13.1)\n","Requirement already satisfied: attrs>=19.1.0 in /usr/local/lib/python3.11/dist-packages (from ics) (25.3.0)\n","Requirement already satisfied: types-python-dateutil>=2.8.10 in /usr/local/lib/python3.11/dist-packages (from arrow>=0.11->ics) (2.9.0.20250708)\n","What day of your cycle are you on: 10\n"]}],"source":["!pip install ics\n","\n","from datetime import datetime, timedelta # the date time module supplies classes for manipulating dates and times\n","import random # the random module provides tools for making random selections\n","from ics import Calendar, Event # create events and ics file\n","\n","\n","# define cycle phases\n","cycle_phases = {\n","\"Menstrual\": range(1,6),\n","\"Follicular\": range(6, 14),\n","\"Ovulation\": range(14, 18),\n","\"Luteal\": range(18, 29), # 28 day cycle because 29 is not included\n","}\n","\n","# define workouts\n","workouts = {\n","    \"Upper Body Strength\" : [\"Shoulder Press\", \"Bicep Curl\", \"Hammer Curl\", \"Bent Over Row\", \"One Arm Bent Over Row\"],\n","    \"Lower Body Strength\" : [\"Squat\", \"Deadlift\", \"Hip Thrust\", \"Lunges\"],\n","    \"Cardio\" : [\"Power Flow\", \"Power Pilates\"],\n","    \"Recovery\" : [\"Slow Flow\", \"Gentle Pilates\"],\n","    \"Meditate\" : [\"Meditate\"],\n","    \"Walk\" : [\"Walk\"]\n","}\n","\n","# create random sample of workouts\n","upper_body_exercises = random.sample(workouts[\"Upper Body Strength\"], 3)\n","lower_body_exercises = random.sample(workouts[\"Lower Body Strength\"], 3)\n","cardio_exercises = random.sample(workouts[\"Cardio\"], 1)\n","recovery_exercises = random.sample(workouts[\"Recovery\"], 1)\n","\n","# start date and time of plan based on cycle\n","start_date = datetime.today().replace(hour=9, minute=0, second=0, microsecond=0) # Set start time to 9:00 AM\n","\n","# define months to allow repeat for the cycle length of 28 days\n","total_months = 3\n","total_days = total_months * 30\n","\n","# prompt user to input cycle day\n","cycle_day = input(\"What day of your cycle are you on: \") # returns string\n","\n","try: # convert user input to an integer\n","  current_cycle_day = int(cycle_day)\n","except ValueError:\n","    print(\"Converting input to an integer.\") # had Invalid input. Please enter a number. but the program was still continuing after quit instead of having the user restart the program\n","    quit()\n","\n","# Create a Calendar object\n","calendar = Calendar()\n","\n","\n","for i in range(total_days):\n","  current_date = start_date + timedelta(days=i)\n","  weekday = current_date.weekday()\n","  daily_cycle_day = (current_cycle_day + i -1) % 28 + 1\n","\n","# determine cycle phase\n","  for phase, days_range in cycle_phases.items(): # returns a view object, which contains the key-value pairs of the dictionary, as tuples in a list\n","    if daily_cycle_day in days_range: # Use the new variable\n","      current_phase = phase\n","      break\n","  # create events\n","  event = Event()\n","  event.begin = current_date\n","  event.end = current_date + timedelta(hours=1) # Set end time to 1 hour after start time\n","\n","  # establish weekend rest days\n","  if weekday in [5, 6]:\n","    event.name = \"Rest Day\"\n","    event.description = \"Take a full rest day.\"\n","\n","  # workout selection\n","  elif current_phase == \"Menstrual\":\n","    event.name = \"Recovery Day\"\n","    event.description = \", \".join(recovery_exercises + [\"Meditate\"])\n","  elif current_phase == \"Follicular\":\n","    if daily_cycle_day % 2 == 0: #\n","      event.name = \"Full Body Strength.\"\n","      event.description = \", \".join(upper_body_exercises + lower_body_exercises)\n","    else:\n","        event.name = \"Cardio\"\n","        event.description = \", \".join(cardio_exercises + [\"Walk\"])\n","  elif current_phase == \"Ovulation\":\n","      event.name = \"Full Body Strength + Cardio\"\n","      event.description = \", \".join(upper_body_exercises + lower_body_exercises + [\"Walk\"])\n","  elif current_phase == \"Luteal\":\n","      if daily_cycle_day % 2 == 0:\n","          event.name = \"Active Recovery\"\n","          event.description = \", \".join(recovery_exercises + [\"Walk\"])\n","      else:\n","          event.name = \"Active Recovery\"\n","          event.description = \", \".join([\"Walk\"] + [\"Meditate\"])\n","\n","\n","  calendar.events.add(event)\n","\n","# save as ics file\n","with open(\"workout_schedule.ics\", \"w\") as f:\n","  f.writelines(calendar)\n","\n","# program ends after last line is executed"]},{"cell_type":"code","source":[],"metadata":{"id":"MY2dFZNQ6FDE"},"execution_count":null,"outputs":[]}]}